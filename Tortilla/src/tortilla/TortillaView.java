/*
 * TortillaView.java
 */
package tortilla;

import java.awt.Frame;
//import java.awt.event.ActionEvent;
//import java.awt.event.ActionListener;
import org.jdesktop.application.Action;
import org.jdesktop.application.SingleFrameApplication;
import org.jdesktop.application.FrameView;
import org.jdesktop.application.Task;
import java.util.ArrayList;
import java.util.Vector;
import java.util.concurrent.ConcurrentHashMap;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
//import javax.swing.Timer;
import javax.swing.table.AbstractTableModel;

/**
 * The application's main frame.
 */
public class TortillaView extends FrameView {

    /**
     * Create a new TortillaView using given SingleFrameApplication.
     * TODO Smooth refreshes (overwrite new values, don't delete data first).
     * @param app Application calling TortillaView
     */
    public TortillaView(SingleFrameApplication app) {
        super(app);

        initComponents();
        updateButton.doClick();

//        // Refreshes serverlist every 20 seconds.
//        int delay = 90000;
//        ActionListener refreshTask = new ActionListener() {
//
//            @Override
//            public void actionPerformed(ActionEvent evt) {
//                refreshButton.doClick();
//            }
//        };
//        new Timer(delay, refreshTask).start();
    }

    /**
     * Display about box.
     */
    @Action
    public void showAboutBox() {
        if (aboutBox == null) {
            JFrame mainFrame = TortillaApp.getApplication().getMainFrame();
            aboutBox = new TortillaAboutBox(mainFrame);
            aboutBox.setLocationRelativeTo(mainFrame);
        }
        TortillaApp.getApplication().show(aboutBox);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        searchTextField = new javax.swing.JTextField();
        jToolBar1 = new javax.swing.JToolBar();
        updateButton = new javax.swing.JButton();
        refreshButton = new javax.swing.JButton();
        detailButton = new javax.swing.JButton();
        connectButton = new javax.swing.JButton();
        menuBar = new javax.swing.JMenuBar();
        javax.swing.JMenu fileMenu = new javax.swing.JMenu();
        javax.swing.JMenuItem exitMenuItem = new javax.swing.JMenuItem();
        viewMenu = new javax.swing.JMenu();
        hideHighPingMenuItem = new javax.swing.JCheckBoxMenuItem();
        hideEmptyMenuItem = new javax.swing.JCheckBoxMenuItem();
        hideFullMenuItem = new javax.swing.JCheckBoxMenuItem();
        optionsMenu = new javax.swing.JMenu();
        sdlCheckBoxMenuItem = new javax.swing.JCheckBoxMenuItem();
        javax.swing.JMenu helpMenu = new javax.swing.JMenu();
        javax.swing.JMenuItem aboutMenuItem = new javax.swing.JMenuItem();

        mainPanel.setName("mainPanel"); // NOI18N

        jScrollPane1.setDoubleBuffered(true);
        jScrollPane1.setName("jScrollPane1"); // NOI18N

        jTable1.setAutoCreateRowSorter(true);
        jTable1.setModel(getModel());
        jTable1.setDoubleBuffered(true);
        jTable1.setName("jTable1"); // NOI18N
        jTable1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jTable1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTable1FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTable1FocusLost(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);
        jTable1.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(tortilla.TortillaApp.class).getContext().getResourceMap(TortillaView.class);
        searchTextField.setText(resourceMap.getString("searchTextField.text")); // NOI18N
        searchTextField.setName("searchTextField"); // NOI18N
        searchTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                searchTextFieldKeyTyped(evt);
            }
        });

        jToolBar1.setBorder(null);
        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);
        jToolBar1.setBorderPainted(false);
        jToolBar1.setName("jToolBar1"); // NOI18N
        jToolBar1.setPreferredSize(new java.awt.Dimension(214, 42));

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(tortilla.TortillaApp.class).getContext().getActionMap(TortillaView.class, this);
        updateButton.setAction(actionMap.get("update")); // NOI18N
        updateButton.setFocusable(false);
        updateButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        updateButton.setMinimumSize(new java.awt.Dimension(42, 42));
        updateButton.setName("updateButton"); // NOI18N
        updateButton.setPreferredSize(new java.awt.Dimension(42, 42));
        updateButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(updateButton);

        refreshButton.setAction(actionMap.get("refresh")); // NOI18N
        refreshButton.setFocusable(false);
        refreshButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        refreshButton.setMinimumSize(new java.awt.Dimension(42, 42));
        refreshButton.setName("refreshButton"); // NOI18N
        refreshButton.setPreferredSize(new java.awt.Dimension(42, 42));
        refreshButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        refreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(refreshButton);

        detailButton.setAction(actionMap.get("viewServer")); // NOI18N
        detailButton.setFocusable(false);
        detailButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        detailButton.setMinimumSize(new java.awt.Dimension(42, 42));
        detailButton.setName("detailButton"); // NOI18N
        detailButton.setPreferredSize(new java.awt.Dimension(42, 42));
        detailButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(detailButton);

        connectButton.setAction(actionMap.get("connect")); // NOI18N
        connectButton.setFocusable(false);
        connectButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        connectButton.setMinimumSize(new java.awt.Dimension(42, 42));
        connectButton.setName("connectButton"); // NOI18N
        connectButton.setPreferredSize(new java.awt.Dimension(42, 42));
        connectButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(connectButton);

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 461, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 95, Short.MAX_VALUE)
                .addComponent(searchTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(searchTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 248, Short.MAX_VALUE))
        );

        menuBar.setName("menuBar"); // NOI18N
        menuBar.setPreferredSize(new java.awt.Dimension(214, 23));

        fileMenu.setMnemonic('F');
        fileMenu.setText(resourceMap.getString("fileMenu.text")); // NOI18N
        fileMenu.setName("fileMenu"); // NOI18N

        exitMenuItem.setAction(actionMap.get("quit")); // NOI18N
        exitMenuItem.setName("exitMenuItem"); // NOI18N
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        viewMenu.setMnemonic('V');
        viewMenu.setText(resourceMap.getString("viewMenu.text")); // NOI18N
        viewMenu.setName("viewMenu"); // NOI18N

        hideHighPingMenuItem.setMnemonic('p');
        hideHighPingMenuItem.setSelected(true);
        hideHighPingMenuItem.setText(resourceMap.getString("hideHighPingMenuItem.text")); // NOI18N
        hideHighPingMenuItem.setToolTipText(resourceMap.getString("hideHighPingMenuItem.toolTipText")); // NOI18N
        hideHighPingMenuItem.setName("hideHighPingMenuItem"); // NOI18N
        hideHighPingMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hideHighPingMenuItemActionPerformed(evt);
            }
        });
        viewMenu.add(hideHighPingMenuItem);

        hideEmptyMenuItem.setMnemonic('e');
        hideEmptyMenuItem.setSelected(true);
        hideEmptyMenuItem.setText(resourceMap.getString("hideEmptyMenuItem.text")); // NOI18N
        hideEmptyMenuItem.setToolTipText(resourceMap.getString("hideEmptyMenuItem.toolTipText")); // NOI18N
        hideEmptyMenuItem.setName("hideEmptyMenuItem"); // NOI18N
        hideEmptyMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hideEmptyMenuItemActionPerformed(evt);
            }
        });
        viewMenu.add(hideEmptyMenuItem);

        hideFullMenuItem.setMnemonic('f');
        hideFullMenuItem.setText(resourceMap.getString("hideFullMenuItem.text")); // NOI18N
        hideFullMenuItem.setToolTipText(resourceMap.getString("hideFullMenuItem.toolTipText")); // NOI18N
        hideFullMenuItem.setName("hideFullMenuItem"); // NOI18N
        hideFullMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hideFullMenuItemActionPerformed(evt);
            }
        });
        viewMenu.add(hideFullMenuItem);

        menuBar.add(viewMenu);

        optionsMenu.setMnemonic('G');
        optionsMenu.setText(resourceMap.getString("optionsMenu.text")); // NOI18N
        optionsMenu.setName("optionsMenu"); // NOI18N

        sdlCheckBoxMenuItem.setMnemonic('S');
        sdlCheckBoxMenuItem.setSelected(true);
        sdlCheckBoxMenuItem.setText(resourceMap.getString("sdlCheckBoxMenuItem.text")); // NOI18N
        sdlCheckBoxMenuItem.setToolTipText(resourceMap.getString("sdlCheckBoxMenuItem.toolTipText")); // NOI18N
        sdlCheckBoxMenuItem.setName("sdlCheckBoxMenuItem"); // NOI18N
        optionsMenu.add(sdlCheckBoxMenuItem);

        menuBar.add(optionsMenu);

        helpMenu.setMnemonic('H');
        helpMenu.setText(resourceMap.getString("helpMenu.text")); // NOI18N
        helpMenu.setName("helpMenu"); // NOI18N

        aboutMenuItem.setAction(actionMap.get("showAboutBox")); // NOI18N
        aboutMenuItem.setName("aboutMenuItem"); // NOI18N
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        setComponent(mainPanel);
        setMenuBar(menuBar);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Get server list from master server when clicked.
     * @param evt
     */
    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButtonActionPerformed
        update();
    }//GEN-LAST:event_updateButtonActionPerformed

    private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshButtonActionPerformed
        refresh();
    }//GEN-LAST:event_refreshButtonActionPerformed

private void hideHighPingMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hideHighPingMenuItemActionPerformed
    refreshTable();
}//GEN-LAST:event_hideHighPingMenuItemActionPerformed

private void hideEmptyMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hideEmptyMenuItemActionPerformed
    refreshTable();
}//GEN-LAST:event_hideEmptyMenuItemActionPerformed

private void hideFullMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hideFullMenuItemActionPerformed
    refreshTable();
}//GEN-LAST:event_hideFullMenuItemActionPerformed

private void searchTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchTextFieldKeyTyped
    refreshTable();
}//GEN-LAST:event_searchTextFieldKeyTyped

private void jTable1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTable1FocusGained
    connectButton.setEnabled(true);
    detailButton.setEnabled(true);
}//GEN-LAST:event_jTable1FocusGained

private void jTable1FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTable1FocusLost
    connectButton.setEnabled(false);
    detailButton.setEnabled(false);
}//GEN-LAST:event_jTable1FocusLost
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton connectButton;
    private javax.swing.JButton detailButton;
    private javax.swing.JCheckBoxMenuItem hideEmptyMenuItem;
    private javax.swing.JCheckBoxMenuItem hideFullMenuItem;
    private javax.swing.JCheckBoxMenuItem hideHighPingMenuItem;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenu optionsMenu;
    private javax.swing.JButton refreshButton;
    private javax.swing.JCheckBoxMenuItem sdlCheckBoxMenuItem;
    private javax.swing.JTextField searchTextField;
    private javax.swing.JButton updateButton;
    private javax.swing.JMenu viewMenu;
    // End of variables declaration//GEN-END:variables
    private JDialog aboutBox;
    private JDialog addPrivateServerBox;
    private GameLauncher launcher = new GameLauncher();
    private MasterQuery queryM = new MasterQuery();
    private ServerTableModel model = new ServerTableModel(COLUMN_NAMES);
    private ArrayList<String> serverList;
    private ConcurrentHashMap<String, Server> serverMap;
    private static final int HIGH_PING = 200;
    private static final String[] COLUMN_NAMES = {"Ping", "Server", "Players", "Max", "Map"};

    /**
     * The custom DefaultTableModel used in TortillaView.
     * @return The DefaultTableModel used here.
     */
    public AbstractTableModel getModel() {
        return model;
    }

    /**
     * Toggle availability of buttons under certain conditions.
     * States: 0 for Update/Refresh clicked, 
     * 1 for Update/Refresh finished,
     * 
     * @param state State of buttons.
     */
    protected void toggleButtons(boolean state) {
        updateButton.setEnabled(state);
        refreshButton.setEnabled(state);
    }

    /**
     * Refreshes the Table of server data using the stored serverMap.
     */
    protected void refreshTable() {
        int ping;
        String hostname;
        int playerCount;
        int maxplayers;
        String map;
        boolean canAddRow;
        ArrayList<Player> players;

        Server current;
        for (String Ip : serverMap.keySet()) {
            if ((current = serverMap.get(Ip)) != null) {
                canAddRow = true;
                ping = current.getPing();
                players = current.getPlayerList();
                hostname = current.getHostname();
                playerCount = current.getPlayerCount();
                maxplayers = current.getMaxPlayers();
                map = current.getMap();

                if ((hideEmptyMenuItem.getState() && (playerCount == 0))
                        || (hideFullMenuItem.getState() && (playerCount == maxplayers))
                        || (hideHighPingMenuItem.getState() && (ping > HIGH_PING))) {
                    canAddRow = false;
                }

                String query = searchTextField.getText().toLowerCase();
                if (!query.isEmpty()) {
                    if (hostname != null && !hostname.toLowerCase().contains(query)) {
                        canAddRow = false;
                    }
                    // Search for player matches; requires getstatus query
//                    if (players != null) {
//                        for (Player player : players) {
//                            if (player.getName().toLowerCase().contains(query)) {
//                                canAddRow = true;
//                                break;
//                            }
//                        }
//                    }
                    if (map != null && map.toLowerCase().contains(query)) {
                        canAddRow = true;
                    }
                }

                if (canAddRow) {
                    model.addRow(current);
                }
            }
        }
    }

    /**
     * Model of the table used to display servers.
     */
    @SuppressWarnings("serial")
    class ServerTableModel extends AbstractTableModel {

        public static final int PING = 0;
        public static final int SERVER = 1;
        public static final int PLAYERS = 2;
        public static final int MAX = 3;
        public static final int MAP = 4;
        protected String[] columnNames;
        private Vector<Server> dataVector;

        public ServerTableModel(String[] columnNames) {
            this.columnNames = columnNames;
            dataVector = new Vector<Server>();
        }

        @Override
        public String getColumnName(int column) {
            return columnNames[column];
        }

        @Override
        public boolean isCellEditable(int row, int column) {
            return false;
        }

        @Override
        public Class getColumnClass(int column) {
            switch (column) {
                case PING:
                case PLAYERS:
                case MAX:
                    return Integer.class;
                case SERVER:
                case MAP:
                    return String.class;
                default:
                    return Object.class;
            }
        }

        @Override
        public Object getValueAt(int row, int column) {
            Server server = dataVector.get(row);
            switch (column) {
                case PING:
                    return server.getPing();
                case PLAYERS:
                    return server.getPlayerCount();
                case MAX:
                    return server.getMaxPlayers();
                case SERVER:
                    return server.getHostname();
                case MAP:
                    return server.getMap();
                default:
                    return new Object();
            }
        }

        @Override
        public void setValueAt(Object value, int row, int column) {
            Server server = dataVector.get(row);
            switch (column) {
                case PING:
                    server.setPing((Integer) value);
                    break;
                case PLAYERS:
                    server.setPlayerCount((Integer) value);
                    break;
                case MAX:
                    server.setMaxPlayers((Integer) value);
                    break;
                case SERVER:
                    server.setHostname((String) value);
                    break;
                case MAP:
                    server.setMap((String) value);
                    break;
                default:
                    System.out.println("invalid index");
            }
            fireTableCellUpdated(row, column);
        }

        @Override
        public int getRowCount() {
            return dataVector.size();
        }

        @Override
        public int getColumnCount() {
            return columnNames.length;
        }

        public void addRow(Server newServer) {
            if (!dataVector.contains(newServer)) {
                dataVector.add(newServer);
                fireTableRowsInserted(
                        dataVector.size() - 1,
                        dataVector.size() - 1);
            }
        }

        public void deleteRow(Server newServer) {
            if (dataVector.contains(newServer)) {
                dataVector.remove(newServer);
                fireTableRowsDeleted(
                        dataVector.size() - 1,
                        dataVector.size() - 1);
            }
        }
    }

    /**
     * Use MasterQuery to download new serverlist.
     * @return
     */
    @Action
    public Task update() {
        return new UpdateTask(getApplication());
    }

    private class UpdateTask extends org.jdesktop.application.Task<Object, Void> {

        UpdateTask(org.jdesktop.application.Application app) {
            super(app);
            toggleButtons(false);
        }

        @Override
        protected Object doInBackground() {
            this.setMessage("Updating...");
            serverList = queryM.getServerList();
            return null;
        }

        @Override
        protected void succeeded(Object result) {
            toggleButtons(true);
            refreshButton.doClick();
        }
    }

    /**
     * Gets details of each server in serverlist, and puts those in servermap.
     */
    @Action
    public void refresh() {
        toggleButtons(false);
        serverMap = new ConcurrentHashMap<String, Server>();

        for (final String ip : serverList) {
            class ServerQuerier extends Thread {

                @Override
                public void run() {
                    Server server = new ServerQuery().getStatus(ip);
                    if (server != null) {
                        serverMap.putIfAbsent(ip, server);
                    }
                    refreshTable();
                }
            }
            (new ServerQuerier()).start();

            toggleButtons(true);
        }
    }

    /**
     * Stub.
     */
    @Action
    public void addFavorite() {
    }

    /**
     * Stub.
     */
    @Action
    public void viewServer() {
    }

    /**
     * Calls GameLauncher on selected server.
     */
    @Action
    public void connect() {
        int selectedRow = jTable1.getSelectedRow();
        int nameColumn = 1;
        String selectedIp = "";

        if (selectedRow != -1) {
            for (int i = 0; i < model.getColumnCount(); i++) {
                if (model.getColumnName(i).contains("Server")) {
                    nameColumn = i;
                }
            }
            String selectedServer = model.getValueAt(selectedRow,
                    nameColumn).toString();
            Server current;
            for (String ip : serverMap.keySet()) {
                if ((current = serverMap.get(ip)) != null) {
                    if (current.getHostname().equals(selectedServer)) {
                        selectedIp = ip;
                    }
                }
            }

            launcher.setSdl(sdlCheckBoxMenuItem.getState());
            launcher.setIp(selectedIp);
            launcher.playGame();
        } else if (serverMap == null) {
            JOptionPane.showMessageDialog(new Frame(),
                    "Please update the server list");
        } else {
            JOptionPane.showMessageDialog(new Frame(),
                    "Please select a server");
        }
    }

    @Action
    public void showPrivateServerBox() {
        if (addPrivateServerBox == null) {
            JFrame mainFrame = TortillaApp.getApplication().getMainFrame();
            addPrivateServerBox = new TortillaAddPrivate(mainFrame, false);
            addPrivateServerBox.setLocationRelativeTo(mainFrame);
        }
        TortillaApp.getApplication().show(addPrivateServerBox);
    }
}
