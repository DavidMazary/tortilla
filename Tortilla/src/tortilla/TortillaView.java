/*
 * TortillaView.java
 */
package tortilla;

import java.awt.Frame;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.Vector;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.RowSorter.SortKey;
import javax.swing.SortOrder;
import javax.swing.table.AbstractTableModel;
import org.jdesktop.application.Action;
import org.jdesktop.application.SingleFrameApplication;
import org.jdesktop.application.FrameView;
import org.jdesktop.application.Task;

/**
 * The application's main frame.
 */
public class TortillaView extends FrameView {

    /**
     * Create a new TortillaView using given SingleFrameApplication.
     * @param app Application calling TortillaView
     */
    public TortillaView(SingleFrameApplication app) {
        super(app);

        initComponents();
        sortOrder.add(new SortKey(0, SortOrder.ASCENDING));
        refresh().execute();
    }

    /**
     * Display about box.
     */
    @Action
    public void showAboutBox() {
        if (aboutBox == null) {
            JFrame mainFrame = TortillaApp.getApplication().getMainFrame();
            aboutBox = new TortillaAboutBox(mainFrame);
            aboutBox.setLocationRelativeTo(mainFrame);
        }
        TortillaApp.getApplication().show(aboutBox);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        tableScrollPane = new javax.swing.JScrollPane();
        serverTable = new javax.swing.JTable(tableModel) {

            public String getToolTipText(MouseEvent e) {
                int nameColumn = ServerTableModel.HOSTNAME;
                int selectedRow = rowAtPoint(e.getPoint());
                StringBuilder playerList = new StringBuilder("");
                if (!getModel().getColumnName(nameColumn).equals("Server")) {
                    for (int i = 0; i < tableModel.getColumnCount(); i++) {
                        if (tableModel.getColumnName(i).equals("Server")) {
                            nameColumn = i;
                            break;
                        }
                    }
                }
                String selectedServer = this.getModel().getValueAt(convertRowIndexToModel(selectedRow), nameColumn).toString();
                for (Server server : tableModel.dataVector) {
                    if (server.getHostname().equals(selectedServer)) {
                        if (server.getPlayerCount() > 0) {
                            playerList.append("<html><b>Players</b><br/>");
                            for (Player player : server.getPlayerList()) {
                                playerList.append(player.getName() + "<br/>");
                            }
                            playerList.append("</html>");
                        }
                        break;
                    }
                }
                return playerList.toString();
            }
        };
        controlsPanel = new javax.swing.JPanel();
        searchTextField = new javax.swing.JTextField();
        favoriteServersToggleButton = new javax.swing.JToggleButton();
        refreshButton = new javax.swing.JButton();
        addButton = new javax.swing.JButton();
        connectButton = new javax.swing.JButton();
        menuBar = new javax.swing.JMenuBar();
        javax.swing.JMenu fileMenu = new javax.swing.JMenu();
        javax.swing.JMenuItem exitMenuItem = new javax.swing.JMenuItem();
        viewMenu = new javax.swing.JMenu();
        hideHighPingMenuItem = new javax.swing.JCheckBoxMenuItem();
        hideEmptyMenuItem = new javax.swing.JCheckBoxMenuItem();
        hideFullMenuItem = new javax.swing.JCheckBoxMenuItem();
        optionsMenu = new javax.swing.JMenu();
        sdlCheckBoxMenuItem = new javax.swing.JCheckBoxMenuItem();
        javax.swing.JMenu helpMenu = new javax.swing.JMenu();
        javax.swing.JMenuItem aboutMenuItem = new javax.swing.JMenuItem();

        mainPanel.setName("mainPanel"); // NOI18N

        tableScrollPane.setDoubleBuffered(true);
        tableScrollPane.setName("tableScrollPane"); // NOI18N

        serverTable.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent e) {
                if (e.getClickCount() == 2) {
                    connect();
                }
            }
        });
        serverTable.setAutoCreateRowSorter(true);
        serverTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        serverTable.setDoubleBuffered(true);
        serverTable.setName("serverTable"); // NOI18N
        serverTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tableScrollPane.setViewportView(serverTable);
        serverTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        controlsPanel.setName("controlsPanel"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(tortilla.TortillaApp.class).getContext().getResourceMap(TortillaView.class);
        searchTextField.setText(resourceMap.getString("searchTextField.text")); // NOI18N
        searchTextField.setName("searchTextField"); // NOI18N
        searchTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                searchTextFieldKeyReleased(evt);
            }
        });

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(tortilla.TortillaApp.class).getContext().getActionMap(TortillaView.class, this);
        favoriteServersToggleButton.setAction(actionMap.get("filterFavorites")); // NOI18N
        favoriteServersToggleButton.setText(resourceMap.getString("favoriteServersToggleButton.text")); // NOI18N
        favoriteServersToggleButton.setBorderPainted(false);
        favoriteServersToggleButton.setName("favoriteServersToggleButton"); // NOI18N

        refreshButton.setAction(actionMap.get("refresh")); // NOI18N
        refreshButton.setToolTipText(resourceMap.getString("refreshButton.toolTipText")); // NOI18N
        refreshButton.setBorderPainted(false);
        refreshButton.setName("refreshButton"); // NOI18N
        refreshButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);

        addButton.setAction(actionMap.get("launchFavoriteServerDialog")); // NOI18N
        addButton.setBorderPainted(false);
        addButton.setName("addButton"); // NOI18N

        connectButton.setAction(actionMap.get("connect")); // NOI18N
        connectButton.setBorderPainted(false);
        connectButton.setName("connectButton"); // NOI18N

        javax.swing.GroupLayout controlsPanelLayout = new javax.swing.GroupLayout(controlsPanel);
        controlsPanel.setLayout(controlsPanelLayout);
        controlsPanelLayout.setHorizontalGroup(
            controlsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(controlsPanelLayout.createSequentialGroup()
                .addComponent(addButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(refreshButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(connectButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 119, Short.MAX_VALUE)
                .addComponent(favoriteServersToggleButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(searchTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        controlsPanelLayout.setVerticalGroup(
            controlsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(controlsPanelLayout.createSequentialGroup()
                .addGroup(controlsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(controlsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(refreshButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(addButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(favoriteServersToggleButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(connectButton)
                    .addGroup(controlsPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(searchTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addGap(2, 2, 2)
                .addComponent(controlsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(tableScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 497, Short.MAX_VALUE)
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addComponent(controlsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addComponent(tableScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 245, Short.MAX_VALUE))
        );

        menuBar.setName("menuBar"); // NOI18N
        menuBar.setPreferredSize(new java.awt.Dimension(214, 23));

        fileMenu.setMnemonic('F');
        fileMenu.setText(resourceMap.getString("fileMenu.text")); // NOI18N
        fileMenu.setName("fileMenu"); // NOI18N

        exitMenuItem.setAction(actionMap.get("quit")); // NOI18N
        exitMenuItem.setName("exitMenuItem"); // NOI18N
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        viewMenu.setMnemonic('V');
        viewMenu.setText(resourceMap.getString("viewMenu.text")); // NOI18N
        viewMenu.setName("viewMenu"); // NOI18N

        hideHighPingMenuItem.setMnemonic('p');
        hideHighPingMenuItem.setSelected(true);
        hideHighPingMenuItem.setText(resourceMap.getString("hideHighPingMenuItem.text")); // NOI18N
        hideHighPingMenuItem.setToolTipText(resourceMap.getString("hideHighPingMenuItem.toolTipText")); // NOI18N
        hideHighPingMenuItem.setName("hideHighPingMenuItem"); // NOI18N
        hideHighPingMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hideHighPingMenuItemActionPerformed(evt);
            }
        });
        viewMenu.add(hideHighPingMenuItem);

        hideEmptyMenuItem.setMnemonic('e');
        hideEmptyMenuItem.setSelected(true);
        hideEmptyMenuItem.setText(resourceMap.getString("hideEmptyMenuItem.text")); // NOI18N
        hideEmptyMenuItem.setToolTipText(resourceMap.getString("hideEmptyMenuItem.toolTipText")); // NOI18N
        hideEmptyMenuItem.setName("hideEmptyMenuItem"); // NOI18N
        hideEmptyMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hideEmptyMenuItemActionPerformed(evt);
            }
        });
        viewMenu.add(hideEmptyMenuItem);

        hideFullMenuItem.setMnemonic('f');
        hideFullMenuItem.setText(resourceMap.getString("hideFullMenuItem.text")); // NOI18N
        hideFullMenuItem.setToolTipText(resourceMap.getString("hideFullMenuItem.toolTipText")); // NOI18N
        hideFullMenuItem.setName("hideFullMenuItem"); // NOI18N
        hideFullMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hideFullMenuItemActionPerformed(evt);
            }
        });
        viewMenu.add(hideFullMenuItem);

        menuBar.add(viewMenu);

        optionsMenu.setMnemonic('G');
        optionsMenu.setText(resourceMap.getString("optionsMenu.text")); // NOI18N
        optionsMenu.setName("optionsMenu"); // NOI18N

        sdlCheckBoxMenuItem.setMnemonic('S');
        sdlCheckBoxMenuItem.setSelected(true);
        sdlCheckBoxMenuItem.setText(resourceMap.getString("sdlCheckBoxMenuItem.text")); // NOI18N
        sdlCheckBoxMenuItem.setToolTipText(resourceMap.getString("sdlCheckBoxMenuItem.toolTipText")); // NOI18N
        sdlCheckBoxMenuItem.setName("sdlCheckBoxMenuItem"); // NOI18N
        optionsMenu.add(sdlCheckBoxMenuItem);

        menuBar.add(optionsMenu);

        helpMenu.setMnemonic('H');
        helpMenu.setText(resourceMap.getString("helpMenu.text")); // NOI18N
        helpMenu.setName("helpMenu"); // NOI18N

        aboutMenuItem.setAction(actionMap.get("showAboutBox")); // NOI18N
        aboutMenuItem.setName("aboutMenuItem"); // NOI18N
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        setComponent(mainPanel);
        setMenuBar(menuBar);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Get server list from master server when clicked.
     * @param evt
     */
private void hideHighPingMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hideHighPingMenuItemActionPerformed
    refreshTable();
}//GEN-LAST:event_hideHighPingMenuItemActionPerformed

private void hideEmptyMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hideEmptyMenuItemActionPerformed
    refreshTable();
}//GEN-LAST:event_hideEmptyMenuItemActionPerformed

private void hideFullMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hideFullMenuItemActionPerformed
    refreshTable();
}//GEN-LAST:event_hideFullMenuItemActionPerformed

private void searchTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchTextFieldKeyReleased
    refreshTable();
}//GEN-LAST:event_searchTextFieldKeyReleased
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JButton connectButton;
    private javax.swing.JPanel controlsPanel;
    private javax.swing.JToggleButton favoriteServersToggleButton;
    private javax.swing.JCheckBoxMenuItem hideEmptyMenuItem;
    private javax.swing.JCheckBoxMenuItem hideFullMenuItem;
    private javax.swing.JCheckBoxMenuItem hideHighPingMenuItem;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenu optionsMenu;
    private javax.swing.JButton refreshButton;
    private javax.swing.JCheckBoxMenuItem sdlCheckBoxMenuItem;
    private javax.swing.JTextField searchTextField;
    private javax.swing.JTable serverTable;
    private javax.swing.JScrollPane tableScrollPane;
    private javax.swing.JMenu viewMenu;
    // End of variables declaration//GEN-END:variables
    private JDialog aboutBox;
    private FavoriteServerDialog addPrivateServerBox;
    private GameLauncher launcher = new GameLauncher();
    private MasterQuery queryM = new MasterQuery();
    private ServerTableModel tableModel = new ServerTableModel();
    private ArrayList<String> serverList;
    private ArrayList<String> favoriteServerList;
    private ConcurrentHashMap<String, Server> serverMap;
    private static final int HIGH_PING = 200;
    private static final int QUERY_THREADS = 200;
    private static final String[] COLUMN_NAMES = {"Ping", "Server", "Players", "Max", "Map"};
    private String operatingSystem = null;
    private Vector<SortKey> sortOrder = new Vector<SortKey>(5);

    /**
     * Model of Nexuiz server data.
     * @author dmaz
     */
    class ServerTableModel extends AbstractTableModel {

        public static final int PING = 0;
        public static final int HOSTNAME = 1;
        public static final int PLAYERS = 2;
        public static final int MAX = 3;
        public static final int MAP = 4;
        private static final long serialVersionUID = 2187967572701857442L;
        protected Vector<Server> dataVector = null;

        public ServerTableModel() {
            dataVector = new Vector<Server>();
        }

        @Override
        public String getColumnName(int column) {
            return COLUMN_NAMES[column];
        }

        @Override
        public boolean isCellEditable(int row, int column) {
            return false;
        }

        @Override
        public Class getColumnClass(int column) {
            switch (column) {
                case HOSTNAME:
                case MAP:
                    return String.class;
                default:
                    return Integer.class;
            }
        }

        @Override
        public Object getValueAt(int row, int column) {
            Server server = dataVector.get(row);
            switch (column) {
                case PING:
                    return server.getPing();
                case PLAYERS:
                    return server.getPlayerCount();
                case MAX:
                    return server.getMaxPlayers();
                case HOSTNAME:
                    return server.getHostname();
                case MAP:
                    return server.getMap();
                default:
                    throw new IndexOutOfBoundsException();
            }
        }

        @Override
        public void setValueAt(Object value, int row, int column) {
            Server server = dataVector.get(row);
            switch (column) {
                case PING:
                    server.setPing((Integer) value);
                    break;
                case PLAYERS:
                    server.setPlayerCount((Integer) value);
                    break;
                case MAX:
                    server.setMaxPlayers((Integer) value);
                    break;
                case HOSTNAME:
                    server.setHostname((String) value);
                    break;
                case MAP:
                    server.setMap((String) value);
                    break;
                default:
                    throw new IndexOutOfBoundsException();
            }
            fireTableCellUpdated(row, column);
        }

        @Override
        public int getRowCount() {
            return dataVector.size();
        }

        @Override
        public int getColumnCount() {
            return COLUMN_NAMES.length;
        }
    }

    /**
     * Adds a row to the table if the application state allows it.
     */
    private synchronized void addRowToModel(Server server) {
        boolean canAddRow = true;
        // Filter by the preferences
        if ((hideEmptyMenuItem.getState() && (server.getPlayerCount() == 0)) ||
                (hideFullMenuItem.getState() && (server.getPlayerCount() == server.getMaxPlayers())) ||
                (hideHighPingMenuItem.getState() && (server.getPing() > HIGH_PING)) ||
                (favoriteServersToggleButton.isSelected() && !server.isFavorite())) {
            canAddRow = false;
        } else if (!searchTextField.getText().isEmpty()) {  // Filter by the search term
            String query = searchTextField.getText().toLowerCase();
            canAddRow = false;
            if (server.getHostname().toLowerCase().contains(query) ||
                    server.getMap().toLowerCase().contains(query)) {
                canAddRow = true;
            } else if (server.getPlayerList() != null) {
                for (Player player : server.getPlayerList()) {
                    if (player.getName().toLowerCase().contains(query)) {
                        canAddRow = true;
                        break;
                    }
                }
            }
        }
        // Add row to preferences
        if (canAddRow) {
            tableModel.dataVector.add(server);
            tableModel.fireTableRowsInserted(tableModel.dataVector.size() - 1, tableModel.dataVector.size() - 1);
        }
        // TODO: Save and restore sortkeys
        serverTable.getRowSorter().setSortKeys(sortOrder);
    }

    /**
     * Deletes data from server table's model and updates rows.
     */
    private void clearTable() {
        if (!tableModel.dataVector.isEmpty()) {
            int dataSize = tableModel.dataVector.size();
            tableModel.dataVector.clear();
            tableModel.fireTableRowsDeleted(0, dataSize - 1);
        }
    }

    /**
     * Clears table, then re-evaluates which rows may be added.
     */
    private void refreshTable() {
        // TODO: Save and restore selected row
        clearTable();
        for (Server server : serverMap.values()) {
            addRowToModel(server);
        }
    }

    /* ------- Actions ------- */
    /**
     * Gets list of servers from master server.
     * Queries servers and adds them to table.
     * @return
     */
    @Action
    public Task refresh() {
        return new RefreshTask(getApplication());
    }

    private class RefreshTask extends org.jdesktop.application.Task<Object, Void> {

        RefreshTask(org.jdesktop.application.Application app) {
            super(app);
            refreshButton.setEnabled(false);
        }

        @Override
        protected Object doInBackground() {
            loadFavoriteServers();
            serverList = queryM.getServerList();
            if (favoriteServerList != null) {
                for (String address : favoriteServerList) {
                    if (serverList.contains(address)) {
                        serverList.remove(address);
                    }
                }
            }
            return null;
        }

        @Override
        protected void succeeded(Object result) {
            clearTable();
            serverMap = new ConcurrentHashMap<String, Server>();

            class ServerQueryRunner implements Runnable {

                String ip;
                boolean favorite;

                public ServerQueryRunner(String address, boolean fav) {
                    ip = address;
                    favorite = fav;
                }

                @Override
                public void run() {
                    Server server = new ServerQuery().getStatus(ip);
                    if (server != null) {
                        server.setFavorite(favorite);
                        serverMap.putIfAbsent(ip, server);
                        addRowToModel(server);
                    }
                }
            }

            ExecutorService pool = Executors.newFixedThreadPool(QUERY_THREADS);
            if (favoriteServerList != null) {
                for (final String ip : favoriteServerList) {
                    pool.execute(new ServerQueryRunner(ip, true));
                }
            }
            for (final String ip : serverList) {
                pool.execute(new ServerQueryRunner(ip, false));
            }
            pool.shutdown();
            refreshButton.setEnabled(true);
        }
    }

    /**
     * Stub.
     */
    @Action
    public void viewServer() {
    }

    /**
     * Calls GameLauncher on selected server.
     */
    @Action
    public void connect() {
        int selectedRow = serverTable.getSelectedRow();

        if (selectedRow != -1) {
            int nameColumn = ServerTableModel.HOSTNAME;
            if (!tableModel.getColumnName(nameColumn).equals("Server")) {
                for (int i = 0; i < tableModel.getColumnCount(); i++) {
                    if (tableModel.getColumnName(i).equals("Server")) {
                        nameColumn = i;
                        break;
                    }
                }
            }
            String selectedServer = tableModel.getValueAt(serverTable.convertRowIndexToModel(selectedRow), nameColumn).toString();
            String selectedIp = null;
            for (Server server : tableModel.dataVector) {
                if (server.getHostname().equals(selectedServer)) {
                    selectedIp = server.getIp();
                    break;
                }
            }

            launcher.setSdl(sdlCheckBoxMenuItem.getState());
            launcher.setIp(selectedIp);
            launcher.playGame();
        } else if (serverMap == null) {
            JOptionPane.showMessageDialog(new Frame(),
                    "Please update the server list");
        } else {
            JOptionPane.showMessageDialog(new Frame(),
                    "Please select a server");
        }
    }

    @Action
    public void launchFavoriteServerDialog() {
        int selectedRow = serverTable.getSelectedRow();
        String selectedIp = null;

        if (selectedRow != -1) {
            int nameColumn = ServerTableModel.HOSTNAME;
            if (!tableModel.getColumnName(nameColumn).equals("Server")) {
                for (int i = 0; i < tableModel.getColumnCount(); i++) {
                    if (tableModel.getColumnName(i).equals("Server")) {
                        nameColumn = i;
                        break;
                    }
                }
            }
            String selectedServer = tableModel.getValueAt(serverTable.convertRowIndexToModel(selectedRow), nameColumn).toString();
            for (Server server : tableModel.dataVector) {
                if (server.getHostname().equals(selectedServer)) {
                    selectedIp = server.getIp();
                    break;
                }
            }
        }
        if (addPrivateServerBox == null) {
            JFrame mainFrame = TortillaApp.getApplication().getMainFrame();
            addPrivateServerBox = new FavoriteServerDialog(mainFrame, false);
            addPrivateServerBox.setLocationRelativeTo(this.getFrame());
            addPrivateServerBox.setTitle("Favorite");
        }
        if (selectedIp != null) {
            addPrivateServerBox.setAddressField(selectedIp);
        }
        TortillaApp.getApplication().show(addPrivateServerBox);
    }

    @Action
    public void filterFavorites() {
        refreshTable();
    }

    /**
     * Reads in config.cfg for favorite servers.
     */
    private void loadFavoriteServers() {
        if (operatingSystem == null) {
            operatingSystem = System.getProperty("os.name");
        }

        try {
            Scanner scanner;
            if (operatingSystem.contains("Linux")) {
                scanner = new Scanner(new File(System.getProperty("user.home") + "/.nexuiz/data/config.cfg"));
            } else {
                scanner = new Scanner(new File(System.getProperty("user.dir") + "\\data\\config.cfg"));
            }
            String line = null;
            while (scanner.hasNextLine()) {
                line = scanner.nextLine();
                if (line.contains("net_slist_favorites")) {
                    scanner = new Scanner(line.replaceAll("[\"]", ""));
                    scanner.next();
                    favoriteServerList = new ArrayList<String>();
                    while (scanner.hasNext()) {
                        favoriteServerList.add(scanner.next());
                    }
                    break;
                }
            }

        } catch (FileNotFoundException ex) {
        }
    }
}
